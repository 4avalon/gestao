// backend\config\db.js

const { Client } = require('pg'); // Importação do PostgreSQL
const dotenv = require('dotenv');

// Carregar variáveis de ambiente
dotenv.config();

const client = new Client({
  connectionString: process.env.DATABASE_URL,
});

client.connect()
  .then(() => console.log('✅ Conectado ao PostgreSQL com sucesso!'))
  .catch(err => console.error('❌ Erro ao conectar ao PostgreSQL:', err));

module.exports = client;



// backend\controllers\dentistaController.js

const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const client = require("../config/db");

const SECRET_KEY = process.env.SECRET_KEY;

// 🔹 Listar todos os dentistas (Apenas ADMIN)
const listarDentistas = async (req, res) => {
    console.log('📋 Requisição: Listar todos os dentistas.');
    try {
        if (!req.usuario.is_admin) {
            console.log('⛔ Acesso negado. Apenas administradores podem listar dentistas.');
            return res.status(403).json({ message: 'Acesso negado. Apenas administradores podem visualizar dentistas.' });
        }
        const result = await client.query("SELECT id, nome, email, telefone, is_admin, is_verified FROM dentistas");
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('❌ Erro ao listar dentistas:', err);
        res.status(500).json({ message: 'Erro interno no servidor.' });
    }
};

// 🔹 Visualizar detalhes de um dentista
const visualizarDentista = async (req, res) => {
    const { id } = req.params;
    console.log(`🔍 Requisição: Visualizar dentista ID=${id}`);
    try {
        const result = await client.query("SELECT id, nome, email, telefone, is_admin, is_verified FROM dentistas WHERE id = $1", [id]);
        if (result.rows.length === 0) {
            console.log("❌ Dentista não encontrado.");
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        res.status(200).json(result.rows[0]);
    } catch (err) {
        console.error("❌ Erro ao buscar dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Adicionar um novo dentista (Começa como não verificado)
const adicionarDentista = async (req, res) => {
    const { nome, email, telefone, senha } = req.body;
    console.log("➕ Requisição: Adicionar dentista.", req.body);

    try {

        // const senhaHash = await bcrypt.hash(senha, 10); // 🔹 Versão com criptografia
        const senhaHash = senha; // 🔹 Versão sem criptografia (para testes rápidos)

        const result = await client.query(
            "INSERT INTO dentistas (nome, email, telefone, senha, is_verified) VALUES ($1, $2, $3, $4, $5) RETURNING id, nome, email, telefone, is_verified",
            [nome, email, telefone, senhaHash, true] // Agora começa como "não verificado" tem q mudar AQUI depois
        );
        res.status(201).json({ message: "Dentista cadastrado com sucesso!", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao adicionar dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};


// 🔹 Alterar dados do dentista (Apenas o próprio dentista ou ADMIN)
const alterarDentista = async (req, res) => {
    const { id } = req.params;
    const { nome, telefone, email, senha } = req.body;
    console.log(`✏️ Requisição: Alterar dentista com ID=${id}`);
    try {
        if (!req.usuario.is_admin && req.usuario.id != id) {
            return res.status(403).json({ message: "Acesso negado. Você só pode alterar seus próprios dados." });
        }
        let senhaHash = undefined;
        if (senha) {
            senhaHash = await bcrypt.hash(senha, 10);
        }
        const result = await client.query(
            "UPDATE dentistas SET nome = $1, telefone = $2, email = $3, senha = COALESCE($4, senha) WHERE id = $5 RETURNING id, nome, email, telefone, is_admin",
            [nome, telefone, email, senhaHash, id] // 🔹 Garantimos que "is_admin" não pode ser alterado
        );
        if (result.rows.length === 0) {
            console.log("❌ Dentista não encontrado.");
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        res.status(200).json({ message: "Dentista atualizado com sucesso.", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao alterar dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Remover um dentista (Apenas ADMIN)
const removerDentista = async (req, res) => {
    if (!req.usuario.is_admin) {
        return res.status(403).json({ message: "Acesso negado. Apenas administradores podem remover dentistas." });
    }
    const { id } = req.params;
    console.log(`🗑️ Requisição: Remover dentista com ID=${id}`);
    try {
        const result = await client.query("DELETE FROM dentistas WHERE id = $1 RETURNING id, nome, email", [id]);
        if (result.rows.length === 0) {
            console.log("❌ Dentista não encontrado.");
            return res.status(404).json({ message: "Dentista não encontrado." });
        }
        res.status(200).json({ message: "Dentista removido com sucesso.", dentista: result.rows[0] });
    } catch (err) {
        console.error("❌ Erro ao remover dentista:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};

// 🔹 Login do dentista com autenticação JWT
const loginDentista = async (req, res) => {
    const { email, senha } = req.body;
    console.log(`🔑 Requisição: Login com email: ${email}`);

    try {
        const emailLower = email.toLowerCase(); // 🔹 Converte o email para minúsculas

        // Busca o dentista no banco de dados ignorando maiúsculas/minúsculas
        const result = await client.query("SELECT * FROM dentistas WHERE LOWER(email) = LOWER($1)", [emailLower]);

        if (result.rows.length === 0) {
            console.log("❌ Dentista não encontrado.");
            return res.status(404).json({ message: "Email ou senha incorretos." });
        }

        const dentista = result.rows[0];
/**
        // Verificando a senha com bcrypt
        const senhaValida = await bcrypt.compare(senha, dentista.senha);
        if (!senhaValida) {
            console.log("❌ Senha incorreta.");
            return res.status(401).json({ message: "Email ou senha incorretos." });
        }
**/
                // 🔥 Comparação direta sem bcrypt (para testes)
        if (senha !== dentista.senha) {
            console.log("❌ Senha incorreta.");
            return res.status(401).json({ message: "Email ou senha incorretos." });
        }
        
        // Gerando token com JWT
        const token = jwt.sign(
            { id: dentista.id, email: dentista.email, is_admin: dentista.is_admin, is_verified: dentista.is_verified },
            SECRET_KEY,
            { expiresIn: "2h", algorithm: "HS256" }
        );

        console.log(`✅ Login bem-sucedido para ${dentista.nome}`);
        console.log("🔍 Dados completos do dentista:", dentista);

        res.status(200).json({
            message: "Login bem-sucedido",
            token,
            dentista
        });
    } catch (err) {
        console.error("❌ Erro ao realizar login:", err);
        res.status(500).json({ message: "Erro interno no servidor." });
    }
};


module.exports = {
    listarDentistas,
    visualizarDentista,
    adicionarDentista,
    alterarDentista,
    removerDentista,
    loginDentista,
};




// backend\controllers\pacienteController.js

const client = require('../config/db'); // Conexão com o banco de dados

// Listar todos os pacientes
const listarPacientes = async (req, res) => {
  console.log('📋 Requisição: Listar todos os pacientes.');
  try {
    const result = await client.query('SELECT * FROM pacientes');
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('❌ Erro ao listar pacientes:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Adicionar um novo paciente
const adicionarPaciente = async (req, res) => {
  const { nome, email, telefone, endereco } = req.body;
  console.log('➕ Requisição: Adicionar paciente.', req.body);

  try {
    const result = await client.query(
      'INSERT INTO pacientes (nome, email, telefone, endereco) VALUES ($1, $2, $3, $4) RETURNING *',
      [nome, email, telefone, endereco]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('❌ Erro ao adicionar paciente:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Remover um paciente
const removerPaciente = async (req, res) => {
  const { id } = req.params;
  console.log(`🗑️ Requisição: Remover paciente com ID=${id}`);

  try {
    const result = await client.query('DELETE FROM pacientes WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      console.log('❌ Paciente não encontrado.');
      return res.status(404).json({ message: 'Paciente não encontrado.' });
    }
    res.status(200).json({ message: 'Paciente removido com sucesso.', paciente: result.rows[0] });
  } catch (err) {
    console.error('❌ Erro ao remover paciente:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

module.exports = {
  listarPacientes,
  adicionarPaciente,
  removerPaciente,
};



// backend\controllers\pedidoController.js

const client = require('../config/db'); // Conexão com o banco de dados

// Listar todos os pedidos
const listarPedidos = async (req, res) => {
  console.log('📋 Requisição: Listar todos os pedidos.');
  try {
    const result = await client.query('SELECT * FROM pedidos');
    res.status(200).json(result.rows);
  } catch (err) {
    console.error('❌ Erro ao listar pedidos:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

const listarPedidosEmAberto = async (req, res) => {
  console.log("📋 Requisição: Listar apenas pedidos em aberto.");
  try {
    const result = await client.query(
      "SELECT * FROM pedidos WHERE status NOT IN ('Concluído', 'Cancelado') ORDER BY data_pagamento DESC"
    );
    res.status(200).json(result.rows);
  } catch (err) {
    console.error("❌ Erro ao listar pedidos em aberto:", err);
    res.status(500).json({ message: "Erro interno no servidor." });
  }
};


// Adicionar um novo pedido
const adicionarPedido = async (req, res) => {
  const { paciente_id, descricao, status } = req.body;
  console.log('➕ Requisição: Adicionar pedido.', req.body);

  try {
    const result = await client.query(
      'INSERT INTO pedidos (paciente_id, descricao, status) VALUES ($1, $2, $3) RETURNING *',
      [paciente_id, descricao, status]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('❌ Erro ao adicionar pedido:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

// Remover um pedido
const removerPedido = async (req, res) => {
  const { id } = req.params;
  console.log(`🗑️ Requisição: Remover pedido com ID=${id}`);

  try {
    const result = await client.query('DELETE FROM pedidos WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      console.log('❌ Pedido não encontrado.');
      return res.status(404).json({ message: 'Pedido não encontrado.' });
    }
    res.status(200).json({ message: 'Pedido removido com sucesso.', pedido: result.rows[0] });
  } catch (err) {
    console.error('❌ Erro ao remover pedido:', err);
    res.status(500).json({ message: 'Erro interno no servidor.' });
  }
};

module.exports = {
  listarPedidos,
  listarPedidosEmAberto,  
  adicionarPedido,
  removerPedido,
};




// backend\middlewares\auth.js

const jwt = require("jsonwebtoken");
const SECRET_KEY = process.env.SECRET_KEY;

// 🔹 Middleware para autenticar qualquer usuário logado
const autenticarToken = (req, res, next) => {
    const token = req.headers["authorization"];
    if (!token) {
        return res.status(403).json({ message: "Acesso negado. Token ausente." });
    }

    try {
        const decoded = jwt.verify(token.replace("Bearer ", ""), SECRET_KEY);
        req.usuario = decoded;
        next();
    } catch (err) {
        return res.status(401).json({ message: "Token inválido." });
    }
};

// 🔹 Middleware para verificar se o usuário é ADMIN
const autenticarAdmin = (req, res, next) => {
    if (!req.usuario || !req.usuario.is_admin) {
        return res.status(403).json({ message: "Acesso negado. Apenas administradores podem realizar esta ação." });
    }
    next();
};

// 🔹 Middleware para verificar se o usuário é um dentista autenticado
const autenticarDentista = (req, res, next) => {
    if (!req.usuario) {
        return res.status(403).json({ message: "Acesso negado. Apenas dentistas autenticados podem realizar esta ação." });
    }
    next();
};

module.exports = { autenticarToken, autenticarAdmin, autenticarDentista };



// backend\middlewares\errorHandler.js

// src/middlewares/errorHandler.js
export const errorHandler = (err, req, res, next) => {
  console.error(`❌ Erro no servidor: ${err.message}`);
  res.status(err.status || 500).json({
    message: err.message || 'Erro interno no servidor.',
    stack: process.env.NODE_ENV === 'production' ? null : err.stack, // Esconde stack em produção
  });
};



// backend\middlewares\validate.js

// src/middlewares/validate.js
import { check, validationResult } from 'express-validator';

// Validação para adicionar ou atualizar dentistas
export const validateDentista = [
  check('nome').notEmpty().withMessage('O nome é obrigatório'),
  check('email').isEmail().withMessage('O email precisa ser válido'),
  check('telefone').notEmpty().withMessage('O telefone é obrigatório'),
  check('senha').notEmpty().withMessage('A senha é obrigatória'),
];

// Validação para adicionar ou atualizar pacientes
export const validatePaciente = [
  check('nome').notEmpty().withMessage('O nome é obrigatório'),
  check('email').isEmail().withMessage('O email precisa ser válido'),
  check('telefone').notEmpty().withMessage('O telefone é obrigatório'),
  check('dentista_id').isInt().withMessage('O ID do dentista deve ser um número válido'),
];

// Validação para adicionar ou atualizar pedidos
export const validatePedido = [
  check('paciente_id').isInt().withMessage('O ID do paciente deve ser um número válido'),
  check('pedido_details').notEmpty().withMessage('Os detalhes do pedido são obrigatórios'),
];

// Middleware para verificar erros de validação
export const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};



// backend\routes\dentistas.js

const express = require("express");
const {
    listarDentistas,
    visualizarDentista,  // 🔹 Nova função para buscar um dentista específico
    adicionarDentista,
    alterarDentista,
    loginDentista,
    removerDentista
} = require("../controllers/dentistaController");

const { autenticarToken, autenticarAdmin, autenticarDentista } = require("../middlewares/auth");

const router = express.Router();

// 🔒 Rotas protegidas e organizadas
router.get("/", autenticarToken, autenticarAdmin, listarDentistas);  // Apenas admins podem listar todos os dentistas
router.get("/:id", autenticarToken, visualizarDentista);  // Qualquer dentista/admin autenticado pode ver um perfil específico
router.post("/", adicionarDentista);  
router.put("/:id", autenticarToken, autenticarDentista, alterarDentista);  // Dentista só altera seus próprios dados
router.post("/login", loginDentista);  // Retorna também o tipo de usuário (admin/dentista)
router.delete("/:id", autenticarToken, autenticarAdmin, removerDentista);  // Apenas admins podem remover dentistas

module.exports = router;



// backend\routes\pacientes.js

const express = require('express');
const {
  listarPacientes,
  adicionarPaciente,
  removerPaciente,
} = require('../controllers/pacienteController');

const router = express.Router();

// Rotas de pacientes
router.get('/', listarPacientes);
router.post('/', adicionarPaciente);
router.delete('/:id', removerPaciente);

module.exports = router;



// backend\routes\pedidos.js

const express = require('express');
const {
  listarPedidos,
  listarPedidosEmAberto,
  adicionarPedido,
  removerPedido,
} = require('../controllers/pedidoController');

const router = express.Router();

// Rotas de pedidos
router.get('/', listarPedidos);
router.get('/abertos', listarPedidosEmAberto);
router.post('/', adicionarPedido);
router.delete('/:id', removerPedido);

module.exports = router;



// backend\server.js

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

// Carregar variáveis de ambiente
dotenv.config();

const dentistasRoutes = require('./routes/dentistas');
const pacientesRoutes = require('./routes/pacientes');
const pedidosRoutes = require('./routes/pedidos');

const app = express();

// Configurações básicas
app.use(cors({ origin: '*' }));
app.use(express.json());

// Rotas
app.use('/dentistas', dentistasRoutes);
app.use('/pacientes', pacientesRoutes);
app.use('/pedidos', pedidosRoutes);

// Inicialização do servidor
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`✅ 7 Servidor rodando na porta ${PORT}`);
});

